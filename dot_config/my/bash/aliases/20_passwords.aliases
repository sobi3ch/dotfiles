# function password.delete() {
#   echo "TODO: finish this same as function encrypt"
#   FILE=$1
#   if test -f "$FILE"; then
#     echo "$FILE exists;"
#   fi
# }

# function password.generate() {
#   echo "usage: $FUNCNAME <length>"
#   if [ -n "$1" ]
#   then
#     LENGTH=$1
#   else
#     # deafult password length
#     LENGTH=32
#   fi
#   date +%s | sha256sum | base64 | head -c $LENGTH ; echo
# }

# function _password.autocomplete() {
#   # autocomplete
#   complete -W "$(password.list|xargs)" password.get pw.get password.delete pw.delete;
# }

# _password.autocomplete

# alias pw.get=password.get
# alias pw.list=password.list
# alias pw.delete=password.delete
# alias pw.gen=password.generate

# function password.generate.ldap() {
#   pwgen 20 1 > ~/passwords/ldap.new.txt

#   _msg "Old password:"
#   _msg "$(cat ~/passwords/ldap.txt.gpg | gpg -d 2> /dev/null)"
#   echo
#   _msg "New password for LDAP has been generated:"
#   _msg "$(cat ~/passwords/ldap.new.txt)"
#   echo
#   echo "Note: run command again to create new password"
#   echo
#   echo "Instructions: "
#   echo "1. Change password on https://adfs.trans.eu/adfs/portal/updatepassword"
#   echo "2. Run password.replace-new-old.ldap"
# }

# function password.replace-new-old.ldap() {
#   DIR=$HOME/passwords
#   read -p "Are you sure [y/N]? " -n 1 -r
#   echo    # (optional) move to a new line
#   if [[ $REPLY =~ ^[Yy]$ ]]
#   then
#     _msg "Encrytping $DIR/ldap.new.txt"
#     encrypt $DIR/ldap.new.txt
#     _msg "Moving $DIR/ldap.new.txt -> $DIR/ldap.txt.gpg"
#     cp $DIR/ldap.txt.gpg $DIR/ldap.txt.gpg.backup
#     mv $DIR/ldap.new.txt.gpg $DIR/ldap.txt.gpg
#     rm $DIR/ldap.new.txt
#     _msg "Done"
#   else
#     echo 'Canceling..'
#   fi
# }
